"use strict";Object.defineProperty(exports,"__esModule",{value:!0});const watcher_1=require("../watcher"),path=require("path"),vsChokidar=require("vscode-chokidar"),fse=require("fs-extra");class BuiltInAAPLWatcherService extends watcher_1.WatcherService{constructor(e,t,i){super(e,t,i),this.root=e,this.config=t,this.extConfig=i,this._disposed=!1}dispose(){this._disposed||(this._disposed=!0,this._chokidar&&(this._chokidar.close(),this._chokidar=null),this.onClose())}startWatch(){if(this._disposed)return void this.config.logger.e("Already disposed");if(this._chokidar)return void this.config.logger.w("VSChoikdar Already start");const e=this.config,t=this.root,i=realcaseSync(t)||t;this.verbose("vschokidar will watch",i);const s=i.length,r=t!==i;r&&e.logger.w(`vschokidar rootDir does not match version on disk and was corrected (original: ${t}, real: ${i})`);const o=vsChokidar.watch(this.root,this.extConfig);this._chokidar=o,o.options.useFsEvents?e.logger.w("vschokidar watcher using fsevents"):e.logger.w("vschokidar watcher not using fsevents!"),o.on("ready",this.onInitSuccess),o.on("close",this.dispose),o.on("error",this.onError),o.on("all",(async(n,a,c)=>{if(o!==this._chokidar)return void e.logger.w("unrecognized vschokidar instance");if(a.indexOf(i)<0)return void console.warn("Unexpected vschokidar file change event",n,a);r&&(a=t+a.substr(s));const h=normalizeNFC(a);let d=c;if(!d&&"unlink"!==n&&"unlinkDir"!==n)try{d=await fse.stat(h)}catch(t){e.logger.e("stat file fail",t),d=void 0}this.onChange({type:n,path:h,stat:d,initialTs:Date.now()})}))}}function realcaseSync(e){const t=path.dirname(e);if(e===t)return e;const i=(path.basename(e)||e).toLowerCase();try{const e=fse.readdirSync(t).filter((e=>e.toLowerCase()===i));if(1===e.length){const i=realcaseSync(t);if(i)return path.join(i,e[0])}else if(e.length>1){const s=e.indexOf(i);if(s>=0){const i=realcaseSync(t);if(i)return path.join(i,e[s])}}}catch(e){}return null}exports.BuiltInAAPLWatcherService=BuiltInAAPLWatcherService;const nonAscii=/[^\u0000-\u0080]/;function normalizeNFC(e){if(!e)return e;let t;return t=nonAscii.test(e)?e.normalize("NFC"):e,t}